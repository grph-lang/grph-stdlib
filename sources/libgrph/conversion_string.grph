//
//  conversion_string.grph
//  GRPH stdlib - libgrph
//
//  Created by Emil Pedersen on 13/02/2022.
//
//  This Source Code Form is subject to the terms of the Mozilla Public
//  License, v. 2.0. If a copy of the MPL was not distributed with this
//  file, You can obtain one at https://mozilla.org/MPL/2.0/.
//

#requires GRPH 1.11
#compiler strict true

#import strutils

string int_to_string[integer number] = #external
string float_to_string[float number] = #external
string rotation_to_string[rotation number] = #external
string type_to_string[type type] = #external

boolean mixed_is_array[mixed value] = #external
string mixed_array_elem_to_string[mixed value, int index] = #external
integer mixed_array_length[mixed value] = #external
type mixed_array_elem_type[mixed value] = #external

#function string direction_to_string[direction dir]
	#switch dir
		#case direction.LEFT
			#return "direction.LEFT"
		#case direction.RIGHT
			#return "direction.RIGHT"
		#case direction.UP
			#return "direction.UP"
		#case direction.DOWN
			#return "direction.DOWN"
		#case direction.UP_LEFT
			#return "direction.UP_LEFT"
		#case direction.UP_RIGHT
			#return "direction.UP_RIGHT"
		#case direction.DOWN_LEFT
			#return "direction.DOWN_LEFT"
		#case direction.DOWN_RIGHT
			#return "direction.DOWN_RIGHT"
		#default
			#return "direction.UNKNOWN"

#function string stroke_to_string[stroke s]
	#switch s
		#case stroke.ELONGATED
			#return "stroke.ELONGATED"
		#case stroke.CUT
			#return "stroke.CUT"
		#case stroke.ROUNDED
			#return "stroke.ROUNDED"
		#default
			#return "stroke.UNKNOWN"

#function string? grphas_string[mixed val] = null
	#if val is void
		#return "void.VOID"
	#elseif val is boolean
		#if [val as! boolean]
			#return "true"
		#else
			#return "false"
	#elseif val is integer
		#return int_to_string[[val as! integer]]
	#elseif val is float
		#return float_to_string[[val as! float]]
	#elseif val is rotation
		#return rotation_to_string[[val as! rotation]]
	#elseif val is string
		#return val as! string
	#elseif val is type
		#return type_to_string[[val as! type]]
	#elseif val is direction
		#return direction_to_string[[val as! direction]]
	#elseif val is stroke
		#return stroke_to_string[[val as! stroke]]
	#elseif val is color
		final color c = val as! color
		string params = toString[c.red c.green c.blue]
		#if c.falpha < 1.0
			params = toString[params c.falpha]
		#return concat["color(" params ")"]
	#elseif val is pos
		final pos p = val as! pos
		#return concat[p.x "," p.y]
	#elseif mixed_is_array[val]
		string s = "<" + type_to_string[mixed_array_elem_type[val]] + ">{"
		int i = 0
		int len = mixed_array_length[val]
		#while i < len
			#if i != 0
				s += ", "
			s += mixed_array_elem_to_string[val i]
			i += 1
		#return s + "}"

#function string grphas_string_forced[mixed val]
	string? opt = grphas_string[val]
	#if opt == null
		#return ""
	#else
		#return opt!
